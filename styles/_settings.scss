// hsl(0,0%,0%) #000
// hsl(0,0%,96%) #f5f5f5
// hsl(0,0%,93%) #eee
// hsl(0,0%,87%) #ddd
// hsl(0,0%,80%) #ccc
// hsl(0,0%,20%) #333
// hsl(0,0%,7%) #111111
// hsl(343,37%,96%) #f9f2f4
// hsl(345,69%,46%) #c7254e

// $black: hsl(0,0%,0%)
// $white: hsl(0,0%,100%)
// $silver: hsl(0,0%,75%)
// $lightGrey: hsl(0,0%,74%)
// $mediumGrey: hsl(0,0%,28%)
// $activeGreen_dark: darken($activeGreen, 10%)
// $pendingBlue_dark: darken($pendingBlue, 10%)
// $pink_Dark: darken($pink, 10%)
// $lossRed: hsl(0,79%,64%)
// $pendingBlue: hsl(215,85%,56%)
// $activeGreen: hsl(146,64%,42%)
// $darkGrey: hsl(31,2%,20%)
// $pink: hsl(11,87%,69%)
// $brassR: hsl(13,33%,38%)
// $brassT: hsl(13,53%,69%)
// $brassL: hsl(12,26%,43%)

@function _safe_read($dict, $key, $name) {
  $res: map-get($dict, $key);
  @if $res == null { @error "there is no #{$name} for key: #{$key}"; }
  @return $res;
}

@function color($key) { @return _safe_read($color, $key, "color"); }
@function spacing($key) { @return _safe_read($spacing, $key, "spacing"); }
@function shadow($key) { @return _safe_read($shadow, $key, "shadow"); }

$color: (
  black: hsl(0, 0%, 0%),
  blackish: hsl(0, 0%, 13%),
  grayDark: hsl(0, 0%, 30%),
  gray: hsl(0, 0%, 50%),
  // grayLight: hsl(0, 0%, 70%),
  // whiteDarker: hsl(0, 0%, 85%),
  // whiteDark: hsl(0, 0%, 95%),
  transparent: hsla(0, 0%, 0%, 0),
  whiteDark: hsl(0, 0%, 90%),
  white: hsl(0, 0%, 100%),
  'white\\.1': hsla(0, 0%, 100%, 0.1),
  'white\\.6': hsla(0, 0%, 100%, 0.6),
  // pinkishLight: hsl(3, 88%, 74%),
  pinkish:      hsl(10, 86%, 68%),
  // pinkishDark:  hsl(3, 62%, 66%),
  blueish: hsl(214, 84%, 56%),
  greenish: hsl(145, 63%, 42%),
  grayish: hsl(0, 0%, 37%)
);

$shadow: (
  s: 0.0rem 0.2rem 0.4rem rgba(color(blackish), $alpha: 0.225),
  m: 0.0rem 0.4rem 1.5rem rgba(color(blackish), $alpha: 0.225),
  l: 0.0rem 0.4rem 2.5rem rgba(color(blackish), $alpha: 0.225),
  'currentColor': inset 0 0 0 0.1rem currentColor
);

$spacing: (
  s: 0.5rem,
  m: 1.0rem,
  l: 2.0rem,
  xl: 3.0rem,
  xxl: 4.0rem
);

// adopted from https://github.com/safareli/responsive-utils/blob/master/responsive-utils.scss
@mixin util($selector, $pseudos) {
  #{$selector} {
    @content;
  }
  @each $pseudo in $pseudos {
    #{$selector}\:#{$pseudo}:#{$pseudo} {
      @content;
    }
  }
}

@mixin utils($name, $props, $values, $pseudos: ()) {
  @each $valueName, $value in $values {
    @include util(#{$name}#{$valueName}, $pseudos) {
      @each $prop in $props {
        #{$prop}: $value;
      }
    }
  }
}